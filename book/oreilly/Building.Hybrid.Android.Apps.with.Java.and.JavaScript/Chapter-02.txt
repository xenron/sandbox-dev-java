
==================================
# sample Android SDK tools and platform-tools paths for MAC 
# export ANDROID_HOME=/Users/<username>/android-sdks
PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools 
==================================

================================== 
$ mkdir project_dir 
$ cd project_dir 
$ android create project -n HelloWorld -p ./ -t android-14 
  -k com.helloworld --activity MainActivity 
# -p is the path where the project files are to be generated 
# -n Specified the name of the Project 
# -t The android SDK to be used for compilation 
# -k package name for the generated project 
# --activity Name of the generated Activity Class 
==================================

================================== 
Created directory
/Users/<username>/project_dir/src/com/helloworld Added file 
./src/com/helloworld/MainActivity.java Created directory
/Users/<username>/project_dir/res Created directory
/Users/<username>/project_dir/bin Created directory
/Users/<username>/project_dir/libs Created directory
/Users/<username>/project_dir/res/values Added file
./res/values/strings.xml Created directory
/Users/<username>/project_dir/res/layout Added file
./res/layout/main.xml Created directory
/Users/<username>/project_dir/res/drawable-xhdpi Created directory
/Users/<username>/project_dir/res/drawable-hdpi Created directory
/Users/<username>/project_dir/res/drawable-mdpi Created directory
/Users/<username>/project_dir/res/drawable-ldpi Added file
./AndroidManifest.xml Added file ./build.xml Added file
./proguard-project.txt 
==================================

================================== 
<?xml version="1.0" encoding="UTF-8"?> 
<project name="HelloWorld" default="help"> 
	<property file="local.properties" />
	<property file="ant.properties" /> 
	<property environment="env" />
	<condition property="sdk.dir" value="${env.ANDROID_HOME}"> 
		<isset property="env.ANDROID_HOME" /> 
	</condition> 
	<loadproperties srcFile="project.properties" /> 
	<fail message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME'" unless="sdk.dir"/> 
	<import file="custom_rules.xml" optional="true" /> 
	<import file="${sdk.dir}/tools/ant/build.xml" /> 
</project> 
==================================

================================== 
$ cd project_dir $ android update project -p . 
# -p is the path 
==================================

================================== 
# cleans up the compiled files and generated resources 
ant clean

# compile and package a debug version of the app 
ant debug

# builds the debug version and installs it on the device or the
# emulator. Another interesting aspect to observe is that you are chaining
# multiple targets in the order they were mentioned on the command line
ant debug install

# builds release version 
ant release
==================================

================================== 
keytool -genkey -v -keystore project_release.keystore -alias \ 
 project -keyalg RSA -keysize 2048 -validity 10000 
==================================

================================== 
# sample ant.properties file 
# Relative path to the keystore 
key.store=project_release.keystore

# The alias for the
key.alias=project

# The password which you supplied while creating the alias for the
key.alias.password=MyPassword

# Password for the key 
key.store.password=MyPassword 
==================================

================================== 
/* AUTO-GENERATED FILE.  DO NOT MODIFY. 
 * 
 * This class was automatically generated by the 
 * aapt tool from the resource data it found.  It 
 * should not be modified by hand. */

package com.helloworld;

public final class R { 
	public static final class attr { } 
	public static final class drawable { 
		public static final int ic_launcher=0x7f020000; 
	}
	public static final class layout { 
		public static final int main=0x7f030000; 
	} 
	public static final class string { 
		public static final int app_name=0x7f040000; 
	} 
} 
==================================

==================================
$ gem install sass 
==================================

================================== 
/* -- application.scss -- */ 
$font_family: Arial, Helvetica; 
$font_size: 1.6em; 
$images_path: "../../img/"; 
$padding: 18px; 
$height: 50%; 
$header_color: #00FFDE; 
==================================

================================== 
/* -- header.scss -- */ 
@import "application";
.main_header { 
	color: $header_color; 
	font-size: $font_size; 
} 
==================================

==================================
$ sass header.scss header.css 
==================================

================================== 
/* -- header.css -- */ 
.main_header { 
	color: #00FFDE;
	font-size: 1.6em; 
} 
==================================

==================================
# SASS will watch any changes in the +header.scss+ file 
# and automatically update the +header.css+ with changes. 
$ sass --watch header.scss:header.css

# SASS will watch any changes in the +sass_source+ directory 
# and automatically update the files in the +stylesheet_output+ 
# directory with changes. 
$ sass --watch sass_source:stylesheet_output 
==================================

==================================
<!-- SASS - Converting SCSS files to CSS --> 
<macrodef name="sass-css" description="SASS - Converting SCSS files to CSS">
	<attribute name="include-path"/> 
	<attribute name="src-sass-file"/>
	<attribute name="dst-css-file"/> 
	<sequential> 
		<exec executable="sass">
			<arg value="-I@{include-path}" /> 
			<arg value="@{src-sass-file}" /> 
			<arg value="@{dst-css-file}" /> 
		</exec> 
	</sequential> 
</macrodef> 
==================================

==================================
<target name="sass-css"> 
	<sass-css 
		include-path="src/hybrid/css/ldpi"
		src-sass-file="src/hybrid/css/import.scss"
		dst-css-file="assets/css/ldpi.css" /> 
	<sass-css
		include-path="src/hybrid/css/mdpi"
		src-sass-file="src/hybrid/css/import.scss"
		dst-css-file="assets/css/mdpi.css" /> 
	<sass-css
		include-path="src/hybrid/css/hdpi"
		src-sass-file="src/hybrid/css/import.scss"
		dst-css-file="assets/css/hdpi.css" /> 
	<sass-css
		include-path="src/hybrid/css/xhdpi"
		src-sass-file="src/hybrid/css/import.scss"
		dst-css-file="assets/css/xhdpi.css" /> 
</target> 
==================================

==================================
<!-- JSLint - Syntax-checks JavaScript files -->
<property name="jslint.dir" value="${out.dir}/jslint" />

<property name="jslint.version" value="1.4.7" />

<target name="get-jslint" 
	description="JSLint - Syntax-checks JavaScript
	files" if="jslint-not-found">

	<mkdir dir="${jslint.dir}" />

	<get dest="${jslint.dir}" 
		skipexisting="true"
		src="http://repo2.maven.org/maven2/rhino/js/1.7R2/js-1.7R2.jar"
		verbose="true" />

	<get dest="${jslint.dir}" 
		skipexisting="true"
		src="http://repo2.maven.org/maven2/com/googlecode/jslint4Java/
			jslint4Java/${jslint.version}/
			jslint4Java-${jslint.version}.jar"
		verbose="true" />

	<get dest="${jslint.dir}" 
		skipexisting="true"
		src="http://repo2.maven.org/maven2/com/googlecode/jslint4Java/
			jslint4Java-ant/${jslint.version}/
			jslint4Java-ant-${jslint.version}.jar"
		verbose="true" />

</target> 

<target name="run-jslint">

	<available file="${jslint.dir}/js-1.7R2.jar"
		property="js-1.7R2.present"/> <available
		file="${jslint.dir}/jslint4Java-${jslint.version}.jar"
		property="jslint4Java.present"/> 

	<available
		file="${jslint.dir}/jslint4Java-ant-${jslint.version}.jar"
		property="jslint4Java-ant.present"/>

	<condition property="jslint-not-found"> 
		<not> 
			<and> 
				<isset property="${js-1.7R2.present}"/> 
				<isset property="${jslint4Java.present}"/> 
				<isset property="${jslint4Java-ant.present}"/> 
			</and> 
		</not> 
	</condition>

	<antcall target="get-jslint"/>

	<taskdef name="jslint"
		classname="com.googlecode.jslint4Java.ant.JSLintTask" >

		<classpath> 
			<pathelement location="${jslint.dir}/js-1.7R2.jar" />
			<pathelement 
				location="${jslint.dir}/
					jslint4Java-${jslint.version}.jar" /> 
			<pathelement
				location="${jslint.dir}/
					jslint4Java-ant-${jslint.version}.jar" />
		</classpath> 
	</taskdef>

	<jslint haltOnFailure="true" > 
		<formatter type="plain" /> 
		<fileset
			dir="${src.dir}/js" 
			excludes="vendor/**/*.js" 
			includes="**/*.js" />
	</jslint> 
</target>
==================================

================================== 
<script id="tmpl_about_index" type="text/x-tmpl">
	<section class="content about"> 
		<div class="wrapper"> 
			<span class="title">About Hybrid Note</span> 
			<span class="summary">Hybrid Note is a productivity app for taking your notes...</span> 
			<span class="version">Version <%= data.app_version %></span> 
			<span class="copyright">Copyright <%= data.current_year %> Hybrid Note</span>
		</div> 
	</section> 
</script> 
==================================

==================================
<!-- Templates - Process HTML templates files -->
<macrodef name="templates" 
	description="Templates - Process HTML templates files" > 

	<sequential>
	<!-- merge all template files into templates.html --> 
		<concat destfile="${out.dir}/templates.html" >

			<fileset dir="${src.dir}/templates" 
				includes="**/*.tmpl" /> 
		</concat>

		<loadfile property="templates" 
			srcFile="${out.dir}/templates.html" />

		<copy file="${src.dir}/index.html" 
			overwrite="true"
			todir="${assets.dir}" >
			
			<filterset> 
				<filter token="templates" 
				value="${templates}" />
			</filterset> 
		</copy> 
	</sequential> 
</macrodef>
==================================

==================================
<!-- tells Ant to refer to your environment vars -->
<property environment="env" />
 
<!-- defines location of YUI Compressor -->
<property name="lib.dir" value="${env.COMPRESSOR_HOME}" />
 
<!-- defines output directory -->
<property name="build.dir" value="build" />
 
<!-- output files, one for JS one for CSS -->
<property name="final_js" value="${basedir}/js/complete.js" />
<property name="final_css" value="${basedir}/css/complete.css" />
 
<!-- define nicknames for libraries -->
<property name="yui-compressor" 
	location="${lib.dir}/yuicompressor-2.4.2.jar" />

<property name="yui-compressor-ant-task" 
	location="${lib.dir}/yui-compressor-ant-task-0.5.jar" />
 
<!-- adds libraries to the classpath -->
<path id="yui.classpath">
  <pathelement location="${yui-compressor}" />
  <pathelement location="${yui-compressor-ant-task}" />
</path>
 
<!-- define tasks -->
<taskdef name="yui-compressor" 
	classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
  	<classpath refid="yui.classpath" />
</taskdef>

<!-- targets -->
<target name="-concat">
   
    <!-- concatenates all compressed JS files into one -->
    <concat destfile="${final_js}" force="true" fixlastline="true">
        <fileset dir="${build.dir}" includes="**/*.js" />
        <fileset dir="${build.dir}" includes="**/widgets/*.js" />
    </concat>

    <!-- concatenates all compressed CSS files into one -->
    <concat destfile="${final_css}" force="true" fixlastline="true">
        <fileset dir="${build.dir}" includes="**/*.css" />
        <fileset dir="${build.dir}" includes="**/flexgrid/*.css" />
    </concat>
   
</target>
 
<target name="-minify">
   
    <!-- compresses each JavaScript and CSS file -->
    <!-- and saved as {original_name}-min.{extension} -->
    <yui-compressor
        warn="false"
        munge="true"
        preserveallsemicolons="false"
        fromdir="${basedir}"
        todir="${build.dir}"
  />
   
</target>

<!-- creates the temporary directory -->
<target name="-pre-minify">
    <mkdir dir="${build.dir}" />
</target>

<!-- deletes the temporary directory and all its contents -->
<target name="-post-minify">
    <delete dir="${build.dir}"/>
</target>
 
<target name="min-web-assets" depends="-pre-minify,-minify,-concat,-post-minify" />
==================================

==================================
$ ant open-browser
==================================

==================================
<!-- Safari - Opens the Safari browser with mockup data -->
<target name="open-browser" description="Opens the Safari browser with mockup 
 data">
    <exec executable="open" >
        <arg value="-a" />
        <arg value="safari" />
    </exec>
</target>
==================================

==================================
#!/bin/sh
PIDS=`ps ax | grep 'Safari' | grep -v grep | sort | \ 
 awk '{print $1}' | perl -ne 'chomp;print "$_ "'`
if [ "$PIDS" ]
  then kill $PIDS
fi
echo "waiting for runner to start"
sleep 3s
==================================
