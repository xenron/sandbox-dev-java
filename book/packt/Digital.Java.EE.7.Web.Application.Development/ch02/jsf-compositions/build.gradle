/*******************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2014,2015 by Peter Pilgrim, Milton Keynes, P.E.A.T LTD
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL v3.0
 * which accompanies this distribution, and is available at:
 * http://www.gnu.org/licenses/gpl-3.0.txt
 *
 * Developers:
 * Peter Pilgrim -- design, development and implementation
 *               -- Blog: http://www.xenonique.co.uk/blog/
 *               -- Twitter: @peter_pilgrim
 *
 * Contributors:
 *
 *******************************************************************************/

// Template based on Java EE 7 Developer Handbook by Peter A. Pilgrim
// http://www.xenonique.co.uk/blog/ (CC) 2014

apply plugin: 'war'

// Define equivalent Maven GAV coordinates.
archivesBaseName = 'jsf-compositions'

// Override master project dependencies
dependencies {
//    compile 'org.glassfish.main.extras:glassfish-embedded-all:4.0.1-b01'
    providedCompile 'javax:javaee-api:7.0'

    compile     'joda-time:joda-time:2.2'
    compile     'org.slf4j:slf4j-simple:1.6.4'
}


war {
    // classpath  configurations.extralibs
    // webXml = file("src/main/webapp/WEB-INF/web.xml")
    // baseXml = "servlet-webapp"

    // Exclude GlassFish embedded libraries and avoid java.io.IOException: com.sun.enterprise.admin.remote.RemoteFailureException: Error occurred during deployment: Exception while deploying the app [jsf-compositions-1.0-SNAPSHOT] : Servlet [ParticipantPortImpl] and Servlet [CoordinatorPortImpl] have the same url pattern: [/WSAT11Service].
    rootSpec.exclude("**/glassfish-embedded-all-*.jar")
    rootSpec.exclude("**/glassfish-embedded-runner-*.jar")
}

task(run, dependsOn: 'classes', type: JavaExec) {
    description = 'Runs the main application'
    main = 'uk.co.xenonique.digital.javaee.jsfcomps.AppMain'
    classpath = sourceSets.main.runtimeClasspath
    args 'Mary', 'Peter', 'Jane'
    standardInput = System.in
}

task(generateScript, dependsOn: 'classes') {
    description = 'Generates UNIX bash script that launches the program.'
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        // Not Microsoft Windows
        new File("SampleRunner").withWriter { out ->
            out.println("#!/bin/bash")
            out.println("java -cp ${sourceSets.main.runtimeClasspath.getAsPath()}  uk.co.xenonique.digital.javaee.jsfcomps.AppMain")
        }
        "chmod 755 SampleRunner".execute()
    }
}

