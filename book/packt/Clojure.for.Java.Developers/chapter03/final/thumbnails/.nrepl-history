(let [[f s] [1 2]] f)
(let [[f] [1 2]] f)
(let [[f s t] [1 2]] f)
(let [[f s t] [1 2]] t)
(let [[f & a] [1 2]] t)
(let [[f & a] [1 2]] a)
(let [[f & a] [1 2 ]] a)
(let [[f & a] [1 2 3]] a)
(let [[f & [_ t]] [1 2 3]] a)
(let [[f & [_ t]] [1 2 3]] t)
(let [[f & [_ t]] [1 2 3]] [f t])
(let [[f s t] [1 2 3]] [f t]) ;; [1 3]
(defn func [[f _ t]]
  (+ f t))
(func [1 2 3]) ;; 4
(let [{a :a} {:a 5}] a)
(let [{var :a} {:a 5}] var)
(let [{:keys [a c]} {:a 5 :b 6 :c 7}] c) ;; 7
(let [{:strs [a c]} {:a 5 :b 6 :c 7 “a” 9}] [a c]) ;; [9 nil]
(let [{:strs [a c]} {:a 5 :b 6 :c 7 "a" 9}] [a c]) ;; [9 nil]
(let [{:strs [a c] :or [c 42]} {:a 5 :b 6 :c 7 “a” 9}] [a c]) ;; [9 42]
(let [{:strs [a c] :or [c 42]} {:a 5 :b 6 :c 7 "a" 9}] [a c]) ;; [9 42]
(let [{:strs [a c] :or ["c" 42]} {:a 5 :b 6 :c 7 "a" 9}] [a c]) ;; [9 42]
(let [{:strs [a c] :or {c 42}} {:a 5 :b 6 :c 7 "a" 9}] [a c]) ;; [9 42]
