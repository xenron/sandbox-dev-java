Para generar estos certificados tienes que tener instalado Open SSL en tu sistema operativo, viene instalado en la mayor√≠a por default como es mi caso, 
Sin embargo, si no lo tienes disponible, puedes obtener el instalador desde este enlace http://www.openssl.org/related/binaries.html para continuar con la creacion de los certificados.
Pasos para generar los certificados

During this process we are going to use several passwords, some for the CA, some others for the client and some others for the server. With the purpose to avoid mistakes, let's use the default application server password changeit. Because of this we are going to omit the password that must be entered, since it is always the same one. 

Primero tenemos que generar el key del CA
openssl genrsa -des3 -out ca.key 4096

Now we are going to generate the CA certificate using the key ca.key we just created few minutes ago. Type the following command: 
openssl req -x509 -days 365 -new -key ca.key -out ca.crt

Aqui puedes ingresar cualquier tipo de informacion que tu desees

What we do right now will be to generate a certificate for our application server using the CA key. The first step is to generate a request file with our information, so the CA uses it and generate the certificate. The file that contains the request is going to be generated this way:
openssl req -new -key ca.key -out server.csr
Aqui puedes volver a ingresar cualquier tipo de informacion que tu desees

And late we generate the certificate:
openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 001 -out server.crt  

Now we need to create a user for the application, this means, to generate another certificate. We will do it the same way we just explained earlier, so let's generate the request file: 
openssl req -new -key ca.key -out client.csr

And now from the request file we are going to generate the certificate:
openssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 002 -out client.crt  

Obviously, the certificates are generated by the CA, but since we are the CA, we do it this way. 
 
Now that we have our certificates done, we should create a place where they can be stored. 
JBoss is capable of using three password storage formats: JKS, PKCS11 or PKCS12. For our example we will use PKCS12.
The first step is to export the server certificate into this format:

openssl pkcs12 -export -inkey ca.key -in server.crt -out server.pkcs12 

And then, through the JDK key tool let's create the password storage: 
keytool -importkeystore -destkeystore server.keystore -srckeystore server.pkcs12 -srcstoretype PKCS12


Next, we are going to add the certificate of our CA to the JBoss certificates storage:
keytool -importcert -alias "PacktPub" -file ca.crt -keystore server.truststore


Por ultimo convertiremos el archivo client.pkcs12 a client.pfx
openssl pkcs12 -export -out client.pfx -inkey ca.key -in server.crt -certfile client.crt

Este archivo lo utilizaremos mas adelante desde el SOAP UI al momento de realizar el request